// Mocks generated by Mockito 5.3.2 from annotations
// in useradgents_burger/test/unit-tests/data/data_sources/remote/burger/burger_remote_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i9;

import 'package:dio/dio.dart' as _i2;
import 'package:http_mock_adapter/http_mock_adapter.dart' as _i6;
import 'package:http_mock_adapter/src/matchers/http_matcher.dart' as _i3;
import 'package:http_mock_adapter/src/request.dart' as _i4;
import 'package:http_mock_adapter/src/response.dart' as _i5;
import 'package:http_mock_adapter/src/types.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpRequestMatcher_1 extends _i1.SmartFake
    implements _i3.HttpRequestMatcher {
  _FakeHttpRequestMatcher_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestMatcher_2 extends _i1.SmartFake
    implements _i4.RequestMatcher {
  _FakeRequestMatcher_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMockResponse_3 extends _i1.SmartFake implements _i5.MockResponse {
  _FakeMockResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponseBody_4 extends _i1.SmartFake implements _i2.ResponseBody {
  _FakeResponseBody_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioAdapter extends _i1.Mock implements _i6.DioAdapter {
  MockDioAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  _i3.HttpRequestMatcher get matcher => (super.noSuchMethod(
        Invocation.getter(#matcher),
        returnValue: _FakeHttpRequestMatcher_1(
          this,
          Invocation.getter(#matcher),
        ),
      ) as _i3.HttpRequestMatcher);
  @override
  _i4.RequestMatcher get requestMatcher => (super.noSuchMethod(
        Invocation.getter(#requestMatcher),
        returnValue: _FakeRequestMatcher_2(
          this,
          Invocation.getter(#requestMatcher),
        ),
      ) as _i4.RequestMatcher);
  @override
  _i7.MockResponseBodyCallback get mockResponse => (super.noSuchMethod(
        Invocation.getter(#mockResponse),
        returnValue: (_i2.RequestOptions options) => _FakeMockResponse_3(
          this,
          Invocation.getter(#mockResponse),
        ),
      ) as _i7.MockResponseBodyCallback);
  @override
  List<_i4.RequestMatcher> get history => (super.noSuchMethod(
        Invocation.getter(#history),
        returnValue: <_i4.RequestMatcher>[],
      ) as List<_i4.RequestMatcher>);
  @override
  _i8.Future<_i2.ResponseBody> fetch(
    _i2.RequestOptions? requestOptions,
    _i8.Stream<_i9.Uint8List>? requestStream,
    _i8.Future<dynamic>? cancelFuture,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [
            requestOptions,
            requestStream,
            cancelFuture,
          ],
        ),
        returnValue: _i8.Future<_i2.ResponseBody>.value(_FakeResponseBody_4(
          this,
          Invocation.method(
            #fetch,
            [
              requestOptions,
              requestStream,
              cancelFuture,
            ],
          ),
        )),
      ) as _i8.Future<_i2.ResponseBody>);
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> setDefaultRequestHeaders(
    _i2.Dio? dio,
    _i2.RequestOptions? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultRequestHeaders,
          [
            dio,
            options,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onRoute(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    required _i4.Request? request,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onRoute,
          [
            route,
            requestHandlerCallback,
          ],
          {#request: request},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onGet(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onGet,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onHead(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onHead,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPost(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onPost,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPut(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onPut,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDelete(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onDelete,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onPatch(
    Pattern? route,
    _i7.MockServerCallback? requestHandlerCallback, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onPatch,
          [
            route,
            requestHandlerCallback,
          ],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isMockDioError(_i5.MockResponse? mockResponse) => (super.noSuchMethod(
        Invocation.method(
          #isMockDioError,
          [mockResponse],
        ),
        returnValue: false,
      ) as bool);
}
